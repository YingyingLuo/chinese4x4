__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1704077301813, "brython_dragdrop": [".py", "from .api import (\n__version__,\n\nDraggableMixin,\nmake_droppable,\nswap,\njoin,\noccupy,\n)\n", ["brython_dragdrop.api"], 1], "brython_dragdrop.api": [".py", "__version__=\"0.1.0\"\n\n\n\ntry :\n from browser import document\nexcept ModuleNotFoundError:\n print(\"Warning: This package is designed for Brython only.\")\n \nclass DraggableMixin(object):\n ''\n def __init__(self,*args,**kwargs):\n \n  if not kwargs.get(\"id\"):\n   kwargs[\"id\"]=\"id_{}\".format(id(self))\n  if not kwargs.get(\"Class\"):\n   kwargs[\"Class\"]=self.__class__.__name__\n  kwargs[\"draggable\"]=True\n  super(DraggableMixin,self).__init__(*args,**kwargs)\n  self.bind(\"mouseover\",self.__mouseover)\n  self.bind(\"dragstart\",self.__dragstart)\n  \n @staticmethod\n def __mouseover(event):\n  event.target.style.cursor=\"pointer\"\n  \n @staticmethod\n def __dragstart(event):\n  event.dataTransfer.setData(\"dragged\",event.target.id)\n  \n  \ndef swap(dragged:DraggableMixin,target:DraggableMixin):\n ''\n assert isinstance(target,DraggableMixin)\n \n temp=document.createElement(\"SPAN\")\n dragged.parentNode.insertBefore(temp,dragged)\n target.parentNode.insertBefore(dragged,target)\n temp.parentNode.insertBefore(target,temp)\n temp.parentNode.removeChild(temp)\n \n \ndef join(dragged:DraggableMixin,target):\n ''\n\n \n assert not isinstance(target,DraggableMixin)\n target.appendChild(dragged)\n \n \ndef occupy(dragged:DraggableMixin,target):\n ''\n\n \n assert not isinstance(target,DraggableMixin)\n occupants=target.select('[draggable=\"true\"]')\n if len(occupants)>1:\n  print(\"We haven't implemented swapping multiple occupants, yet\")\n elif len(occupants)==1:\n  swap(dragged,occupants[0])\n else :\n  target.appendChild(dragged)\n  \n  \ndef make_droppable(selector,rules=None ):\n ''\n\n\n\n\n\n\n\n \n engine=_RulesEngine(rules)\n for element in document.select(selector):\n  element.bind(\"dragover\",engine._dragover)\n  element.bind(\"drop\",engine._drop)\n  \n  \nclass _RulesEngine(object):\n def __init__(self,rules):\n  self._rules=rules or {\n  (DraggableMixin,DraggableMixin):swap,\n  \n  \n  (DraggableMixin,object):join,\n  }\n  \n def _dragover(self,event):\n  dragged=document[event.dataTransfer.getData(\"dragged\")]\n  if self.is_droppable(dragged,event.target):\n   event.dataTransfer.dropEffect=\"move\"\n   event.preventDefault()\n   \n def is_droppable(self,dragged,target):\n  ''\n\n\n\n  \n  return self._choose_rule(dragged,target)is not None\n  \n def _choose_rule(self,dragged,target):\n  for d,t in self._rules:\n   if isinstance(dragged,d)and isinstance(target,t):\n    return self._rules[(d,t)]\n    \n def _drop(self,event):\n  dragged=document[event.dataTransfer.getData(\"dragged\")]\n  target=event.target\n  \n  self._choose_rule(dragged,target)(dragged,target)\n  event.preventDefault()\n  self.on_dropped(dragged,target)\n  \n def on_dropped(self,dragged,target):\n  ''\n  \n", ["browser"]]}
__BRYTHON__.update_VFS(scripts)
